#ifndef _AST_H_
#define _AST_H_

struct ast_node
{
    int code;
    int child_count;

    union
    {
        double d;
        float f;
        int i;
        unsigned int ui;
        int b;
        const char *str;
    } data;

    struct ast_node **children;
};

enum ast_node_type
{
    PROGRAM,
    PRIMARY_EXPRESSION,
    POSTFIX_EXPRESSION,
    ARGUMENT_EXPRESSION_LIST,
    UNARY_EXPRESSION,
    UNARY_OPERATOR,
    CAST_EXPRESSION,
    MULTIPLICATIVE_EXPRESSION,
    ADDITIVE_EXPRESSION,
    SHIFT_EXPRESSION,
    RELATIONAL_EXPRESSION,
    EQUALITY_EXPRESSION,
    AND_EXPRESSION,
    EXCLUSIVE_OR_EXPRESSION,
    INCLUSIVE_OR_EXPRESSION,
    LOGICAL_AND_EXPRESSION,
    LOGICAL_OR_EXPRESSION,
    CONDITIONAL_EXPRESSION,
    ASSIGNMENT_EXPRESSION,
    ASSIGNMENT_OPERATOR,
    EXPRESSION,
    CONSTANT_EXPRESSION,
    DECLARATION,
    DECLARATION_SPECIFIERS,
    INIT_DECLARATOR_LIST,
    INIT_DECLARATOR,
    STORAGE_CLASS_SPECIFIER,
    TYPE_SPECIFIER,
    STRUCT_OR_UNION_SPECIFIER,
    STRUCT_OR_UNION,
    STRUCT_DECLARATION_LIST,
    STRUCT_DECLARATION,
    SPECIFIER_QUALIFIER_LIST,
    STRUCT_DECLARATOR_LIST,
    STRUCT_DECLARATOR,
    ENUM_SPECIFIER,
    ENUMERATOR_LIST,
    ENUMERATOR,
    TYPE_QUALIFIER,
    FUNCTION_SPECIFIER,
    DECLARATOR,
    DIRECT_DECLARATOR,
    POINTER,
    TYPE_QUALIFIER_LIST,
    PARAMETER_TYPE_LIST,
    PARAMETER_LIST,
    PARAMETER_DECLARATION,
    IDENTIFIER_LIST,
    TYPE_NAME,
    ABSTRACT_DECLARATOR,
    DIRECT_ABSTRACT_DECLARATOR,
    INITIALIZER,
    INITIALIZER_LIST,
    DESIGNATION,
    DESIGNATOR_LIST,
    DESIGNATOR,
    STATEMENT,
    LABELED_STATEMENT,
    COMPOUND_STATEMENT,
    BLOCK_ITEM_LIST,
    BLOCK_ITEM,
    EXPRESSION_STATEMENT,
    SELECTION_STATEMENT,
    ITERATION_STATEMENT,
    JUMP_STATEMENT,
    TRANSLATION_UNIT,
    EXTERNAL_DECLARATION,
    FUNCTION_DEFINITION,
    DECLARATION_LIST
};

struct ast_node *new_ast_node(int code, ...);
void append_child(struct ast_node *node, const struct ast_node *child);
#endif